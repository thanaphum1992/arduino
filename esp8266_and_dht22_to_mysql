/*
บทความ พัฒนาระบบ Nodemcu ส่งค่าไปเก็บยัง database
*/
#include "DHT.h"
#include <ESP8266WiFi.h>

//#define DHTTYPE DHT11   // DHT 11
//#define DHTTYPE DHT21   // DHT 21 (AM2301)
#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
const int DHTPin = D1;
const char* ssid     = "IT_SERVER";
const char* password = "scp10999";

const char* host = "xxx.xxx.xxx.xxx";  //ใส่ IP หรือ Host ของเครื่อง

DHT dht(DHTPin, DHTTYPE);
void setup() {
  Serial.begin(9600);  
  delay(10);
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  dht.begin();

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");  
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

int value = 0;

void loop() {
  delay(8000);
  ++value;
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
 // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
float hic = dht.computeHeatIndex(t, h, false);

  Serial.print("Humidity: ");
    Serial.print(h);
    Serial.print(" %\t Temperature: ");
    Serial.print(t);
    Serial.print(" *C ");
  
  Serial.print("connecting to ");
  Serial.println(host);

  WiFiClient client;
  const int httpPort = 8080;    // PORT เชื่อมต่อ

  if (!client.connect(host, httpPort)) {
    Serial.println("connection failed");
    return;
  }
  String url = "/esp8266/dht22.php?temperature=";      //ชุด Directory ที่เก็บไฟล์ และตัวแปรที่ต้องการจะฝาก
  String url2 = "&humidity=";                         //
  url += t;                          //ส่งค่าตัวแปร temp
  url2+=h;                           //ส่งค่าตัวแปร humi
String push_url = url+url2;
  Serial.print("Requesting URL: ");
  Serial.println(push_url);

  client.print(String("GET ") + push_url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" + 
               "Connection: close\r\n\r\n");
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Serial.println(">>> Client Timeout !");
      client.stop();
      return;
    }
  }

  // Read all the lines of the reply from server and print them to Serial
  while(client.available()){
    String line = client.readStringUntil('\r');
    Serial.print(line);
  }

  Serial.println();
  Serial.println("closing connection");
}
